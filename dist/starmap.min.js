var CanvasTexture=function(cb){var canvas=document.createElement("canvas");return"function"==typeof cb&&cb(canvas),PIXI.Texture.fromCanvas(canvas)},Particle=function(position,app){"use strict";var sprite=new PIXI.Sprite;sprite.blendMode=PIXI.BLEND_MODES.SCREEN,app.stage.addChild(sprite);var state={ALIVE:"ALIVE",DYING:"DYING",DEAD:"DEAD"},$scope={alpha:1,state:state.ALIVE,sprite:sprite,stage:app,radius:0,haloRadius:0,colour:{red:255,green:255,blue:255},acceleration:new Vector2,velocity:new Vector2(Math.random()-.5,Math.random()-.5),position:position,init:function(){$scope.radius=1.1*Math.random()+1,Math.random()>.7&&($scope.colour.red=Math.round(100*Math.random()+55),$scope.colour.green=Math.round(100*Math.random()+55),$scope.colour.blue=255),$scope.createTexture($scope.radius)},createTexture:function(radius){$scope.haloRadius=Math.ceil(20*radius),sprite.texture=new CanvasTexture(function(canvas){canvas.width=$scope.haloRadius,canvas.height=$scope.haloRadius;var ctx=canvas.getContext("2d");ctx.fillStyle="rgb("+$scope.colour.red+","+$scope.colour.green+","+$scope.colour.blue+")",ctx.beginPath(),ctx.arc($scope.haloRadius/2,$scope.haloRadius/2,radius,0,360,!1),ctx.fill();var grd=ctx.createRadialGradient($scope.haloRadius/2,$scope.haloRadius/2,radius,$scope.haloRadius/2,$scope.haloRadius/2,Math.ceil($scope.haloRadius));grd.addColorStop(0,"rgba("+$scope.colour.red+","+$scope.colour.green+","+$scope.colour.blue+",0.05)"),grd.addColorStop(.3,"rgba("+$scope.colour.red+","+$scope.colour.green+","+$scope.colour.blue+",0)"),ctx.fillStyle=grd,ctx.beginPath(),ctx.arc($scope.haloRadius/2,$scope.haloRadius/2,$scope.haloRadius,0,360,!1)})},die:function(){$scope.state=state.DYING},tick:function(){if($scope.state!=state.DYING)sprite.alpha=.4*Math.random()+.6,$scope.acceleration.set(Math.random()-.5,Math.random()-.5).scale(app.maxSpeed),$scope.acceleration.clampAbs(app.maxSpeed),$scope.velocity.add($scope.acceleration,.1),($scope.position.x+$scope.velocity.x>window.innerWidth||$scope.position.x+$scope.velocity.x<1)&&($scope.velocity.x*=-.9,$scope.acceleration.x*=-.9),($scope.position.y+$scope.velocity.y>window.innerHeight||$scope.position.y+$scope.velocity.y<1)&&($scope.velocity.y*=-.9,$scope.acceleration.y*=-.9),$scope.velocity.clampAbs(app.maxSpeed),$scope.position.add($scope.velocity,.1),sprite.position.x=$scope.position.x-$scope.haloRadius/2,sprite.position.y=$scope.position.y-$scope.haloRadius/2;else if($scope.alpha-=.01,sprite.alpha=$scope.alpha,$scope.alpha<=0)return void($scope.state=state.DEAD)}};return $scope.init(),$scope},StarMap=function(width,height,maxStars){"use strict";var threshold=(width+height)/2/20,maxLines=7*maxStars,renderer=PIXI.autoDetectRenderer(width,height,{backgroundColor:1443889});document.body.appendChild(renderer.view);var stage=new PIXI.Container,joinLines=new PIXI.Graphics;joinLines.blendMode=PIXI.BLEND_MODES.ADD;var counter=$('<span class="counter"></span>').appendTo(document.body),backgroundTexture=new CanvasTexture(function(canvas){canvas.width=width,canvas.height=height;var ctx=canvas.getContext("2d"),grd=ctx.createRadialGradient(width/2,height/2,1,width/2,height/2,height);grd.addColorStop(0,"rgb(22,8,49)"),grd.addColorStop(.4,"rgb(22,8,49)"),grd.addColorStop(.6,"rgb(12,7,24)"),grd.addColorStop(1,"rgb(0,0,0)"),ctx.fillStyle=grd,ctx.fillRect(0,0,width,height)}),renderTexture=new PIXI.RenderTexture(renderer,width,height),renderTexture2=new PIXI.RenderTexture(renderer,width,height),backgroundSprite=new PIXI.Sprite(backgroundTexture),shadowSprite=new PIXI.Sprite(renderTexture),convolutionFilter=new PIXI.filters.ConvolutionFilter([.1,.4,.1,.4,0,.4,.1,.4,.1],width,height);shadowSprite.alpha=.41,shadowSprite.filters=[convolutionFilter],stage.addChild(backgroundSprite);var lineCount,joinCount,thresholdSquare=Math.pow(threshold,2),mouseThreshold=10*threshold,mouseThresholdSquare=10*thresholdSquare,$scope={maxSpeed:10,mouse:new Vector2,width:width,height:height,stage:stage,joinLines:joinLines,nodes:[],deadNodes:[],init:function(){for(var x=0;maxStars>x;x++)$scope.addStar(new Vector2(Math.random()*width,Math.random()*height),$scope);$scope.mouse.active=!1,stage.addChild(joinLines),stage.addChild(shadowSprite)},addStar:function(position){var p=new Particle(position,$scope);$scope.addNode(p),$scope.nodes.length>maxStars&&$scope.killNode()},addNode:function(node){$scope.nodes.push(node)},killNode:function(){var dead=$scope.nodes.shift();$scope.deadNodes.push(dead),dead.die()},tick:function(){var distance;counter.html($scope.nodes.length+$scope.deadNodes.length),$scope.nodes.length>maxStars&&$scope.killNode(),lineCount=0,requestAnimationFrame($scope.tick),joinLines.clear(),$scope.nodes.forEach(function(node,i){if(node.tick(),maxLines>lineCount&&(joinCount=0,$scope.nodes.slice(i).forEach(function(joinNode){if(!(lineCount>maxLines||joinCount>12)){var d2=joinNode.position.distanceSquare(node.position);if(thresholdSquare>d2){lineCount++,joinCount++,distance=Math.sqrt(d2);var alpha=(threshold-distance)/threshold*.4+.05*Math.random();joinLines.lineStyle(alpha*(node.radius+joinNode.radius)*3,56319,alpha),joinLines.moveTo(node.position.x,node.position.y),joinLines.lineTo(joinNode.position.x,joinNode.position.y)}}})),$scope.mouse.active){var mDist=node.position.distanceSquare($scope.mouse);if(mouseThresholdSquare>mDist){distance=Math.sqrt(mDist);var alpha=(mouseThreshold-distance)/mouseThreshold*.4+.05*Math.random();joinLines.lineStyle(1,56319,alpha),joinLines.moveTo(node.position.x,node.position.y),joinLines.lineTo($scope.mouse.x,$scope.mouse.y)}}}),$scope.deadNodes.forEach(function(node,i){node.tick(),"DEAD"==node.state&&(stage.removeChild(node.sprite),$scope.deadNodes.splice($scope.deadNodes.indexOf(node),1))}),backgroundSprite.alpha=0,joinLines.alpha=.1,renderTexture2.render($scope.stage,null,!0),joinLines.alpha=1,backgroundSprite.alpha=1;var temp=renderTexture;renderTexture=renderTexture2,renderTexture2=temp,shadowSprite.texture=renderTexture,renderer.render($scope.stage)}};return $scope.init(),$scope},Vector2=function(x,y){"use strict";x||(x=0),y||(y=0);var $scope={x:x,y:y,add:function(vector,scale){return scale=scale||1,$scope.x+=vector.x*scale,$scope.y+=vector.y*scale,$scope},set:function(x,y){return $scope.x=x,$scope.y=y,$scope},scale:function(multiplier){return $scope.x*=multiplier,$scope.y*=multiplier,$scope},clamp:function(min,max){return $scope.x=Math.min(Math.max($scope.x,min),max),$scope.y=Math.min(Math.max($scope.y,min),max),$scope},clampAbs:function(val){return $scope.clamp(-val,val),$scope},distance:function(vector){return Math.sqrt($scope.distanceSquare(vector))},distanceSquare:function(vector){var dX=Math.pow(vector.x-$scope.x,2),dY=Math.pow(vector.y-$scope.y,2);return dX+dY}};return $scope};
//# sourceMappingURL=data:application/json;base64,
